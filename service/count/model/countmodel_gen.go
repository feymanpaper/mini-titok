// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	countFieldNames          = builder.RawFieldNames(&Count{})
	countRows                = strings.Join(countFieldNames, ",")
	countRowsExpectAutoSet   = strings.Join(stringx.Remove(countFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	countRowsWithPlaceHolder = strings.Join(stringx.Remove(countFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTitokCountCountIdPrefix       = "cache:titokCount:count:id:"
	cacheTitokCountCountCountKeyPrefix = "cache:titokCount:count:countKey:"
)

type (
	countModel interface {
		Insert(ctx context.Context, data *Count) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Count, error)
		FindOneByCountKey(ctx context.Context, countKey string) (*Count, error)
		Update(ctx context.Context, data *Count) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCountModel struct {
		sqlc.CachedConn
		table string
	}

	Count struct {
		Id         int64     `db:"id"`        // 用户id
		CountKey   string    `db:"count_key"` // count的类型
		CountVal   int64     `db:"count_val"` // 计数值
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newCountModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCountModel {
	return &defaultCountModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`count`",
	}
}

func (m *defaultCountModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	titokCountCountCountKeyKey := fmt.Sprintf("%s%v", cacheTitokCountCountCountKeyPrefix, data.CountKey)
	titokCountCountIdKey := fmt.Sprintf("%s%v", cacheTitokCountCountIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, titokCountCountCountKeyKey, titokCountCountIdKey)
	return err
}

func (m *defaultCountModel) FindOne(ctx context.Context, id int64) (*Count, error) {
	titokCountCountIdKey := fmt.Sprintf("%s%v", cacheTitokCountCountIdPrefix, id)
	var resp Count
	err := m.QueryRowCtx(ctx, &resp, titokCountCountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", countRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCountModel) FindOneByCountKey(ctx context.Context, countKey string) (*Count, error) {
	titokCountCountCountKeyKey := fmt.Sprintf("%s%v", cacheTitokCountCountCountKeyPrefix, countKey)
	var resp Count
	err := m.QueryRowIndexCtx(ctx, &resp, titokCountCountCountKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `count_key` = ? limit 1", countRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, countKey); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCountModel) Insert(ctx context.Context, data *Count) (sql.Result, error) {
	titokCountCountCountKeyKey := fmt.Sprintf("%s%v", cacheTitokCountCountCountKeyPrefix, data.CountKey)
	titokCountCountIdKey := fmt.Sprintf("%s%v", cacheTitokCountCountIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, countRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.CountKey, data.CountVal)
	}, titokCountCountCountKeyKey, titokCountCountIdKey)
	return ret, err
}

func (m *defaultCountModel) Update(ctx context.Context, newData *Count) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	titokCountCountCountKeyKey := fmt.Sprintf("%s%v", cacheTitokCountCountCountKeyPrefix, data.CountKey)
	titokCountCountIdKey := fmt.Sprintf("%s%v", cacheTitokCountCountIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, countRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CountKey, newData.CountVal, newData.Id)
	}, titokCountCountCountKeyKey, titokCountCountIdKey)
	return err
}

func (m *defaultCountModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTitokCountCountIdPrefix, primary)
}

func (m *defaultCountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", countRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCountModel) tableName() string {
	return m.table
}
