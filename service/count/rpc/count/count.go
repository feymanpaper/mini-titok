// Code generated by goctl. DO NOT EDIT.
// Source: count.proto

package count

import (
	"context"

	"mini-titok/service/count/rpc/countclient"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DecFollowerCountRequest  = countclient.DecFollowerCountRequest
	DecFollowerCountResponse = countclient.DecFollowerCountResponse
	GetFollowerCountRequest  = countclient.GetFollowerCountRequest
	GetFollowerCountResponse = countclient.GetFollowerCountResponse
	IncFollowerCountRequest  = countclient.IncFollowerCountRequest
	IncFollowerCountResponse = countclient.IncFollowerCountResponse
	InsertUserCountRequest   = countclient.InsertUserCountRequest
	InsertUserCountResponse  = countclient.InsertUserCountResponse

	Count interface {
		IncFollowerCount(ctx context.Context, in *IncFollowerCountRequest, opts ...grpc.CallOption) (*IncFollowerCountResponse, error)
		DecFollowerCount(ctx context.Context, in *DecFollowerCountRequest, opts ...grpc.CallOption) (*DecFollowerCountResponse, error)
		GetFollowerCount(ctx context.Context, in *GetFollowerCountRequest, opts ...grpc.CallOption) (*GetFollowerCountResponse, error)
		InsertUserCount(ctx context.Context, in *InsertUserCountRequest, opts ...grpc.CallOption) (*InsertUserCountResponse, error)
	}

	defaultCount struct {
		cli zrpc.Client
	}
)

func NewCount(cli zrpc.Client) Count {
	return &defaultCount{
		cli: cli,
	}
}

func (m *defaultCount) IncFollowerCount(ctx context.Context, in *IncFollowerCountRequest, opts ...grpc.CallOption) (*IncFollowerCountResponse, error) {
	client := countclient.NewCountClient(m.cli.Conn())
	return client.IncFollowerCount(ctx, in, opts...)
}

func (m *defaultCount) DecFollowerCount(ctx context.Context, in *DecFollowerCountRequest, opts ...grpc.CallOption) (*DecFollowerCountResponse, error) {
	client := countclient.NewCountClient(m.cli.Conn())
	return client.DecFollowerCount(ctx, in, opts...)
}

func (m *defaultCount) GetFollowerCount(ctx context.Context, in *GetFollowerCountRequest, opts ...grpc.CallOption) (*GetFollowerCountResponse, error) {
	client := countclient.NewCountClient(m.cli.Conn())
	return client.GetFollowerCount(ctx, in, opts...)
}

func (m *defaultCount) InsertUserCount(ctx context.Context, in *InsertUserCountRequest, opts ...grpc.CallOption) (*InsertUserCountResponse, error) {
	client := countclient.NewCountClient(m.cli.Conn())
	return client.InsertUserCount(ctx, in, opts...)
}
