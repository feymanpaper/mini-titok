// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fanFieldNames          = builder.RawFieldNames(&Fan{})
	fanRows                = strings.Join(fanFieldNames, ",")
	fanRowsExpectAutoSet   = strings.Join(stringx.Remove(fanFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	fanRowsWithPlaceHolder = strings.Join(stringx.Remove(fanFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	fanModel interface {
		Insert(ctx context.Context, data *Fan) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Fan, error)
		Update(ctx context.Context, data *Fan) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFanModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Fan struct {
		Id         int64        `db:"id"`
		FromId     int64        `db:"from_id"`
		ToId       int64        `db:"to_id"`
		CreateTime time.Time    `db:"create_time"`
		DeleteTime sql.NullTime `db:"delete_time"`
	}
)

func newFanModel(conn sqlx.SqlConn) *defaultFanModel {
	return &defaultFanModel{
		conn:  conn,
		table: "`fan`",
	}
}

func (m *defaultFanModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFanModel) FindOne(ctx context.Context, id int64) (*Fan, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fanRows, m.table)
	var resp Fan
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFanModel) Insert(ctx context.Context, data *Fan) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, fanRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FromId, data.ToId, data.DeleteTime)
	return ret, err
}

func (m *defaultFanModel) Update(ctx context.Context, data *Fan) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fanRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.FromId, data.ToId, data.DeleteTime, data.Id)
	return err
}

func (m *defaultFanModel) tableName() string {
	return m.table
}
